plugins {
    id 'com.android.application'
}
apply from: "../utils.gradle"
def configuration = rootProject.ext.configuration
android {
    compileSdkVersion configuration.compileSdkVersion
    buildToolsVersion configuration.buildToolsVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        milkcollection {
            storeFile file('../keystore/milkcollection.jks')
            storePassword "123456"
            keyAlias "milkcollection"
            keyPassword "123456"
        }
        milkcollectionchild {
            storeFile file('../keystore/milkcollectionchild.jks')
            storePassword "123456"
            keyAlias "milkcollectionchild"
            keyPassword "123456"
        }
    }

    flavorDimensions "build"
    productFlavors {
        milkcollection {
            dimension "build"
            applicationIdSuffix ".milkcollection"
            manifestPlaceholders = [hostName: "www.milkcollection.com"]
            copy {
                from 'src/milkcollection/'
                include '*'
                into '.'
            }
            signingConfig signingConfigs.milkcollection
        }
        milkcollectionchild {
            dimension "build"
            applicationIdSuffix ".milkcollectionchild"
            manifestPlaceholders = [hostName: "www.milkcollectionchild.com"]
            copy {
                from 'src/milkcollectionchild/'
                include '*'
                into '.'
            }
            signingConfig signingConfigs.milkcollectionchild
        }
    }

    defaultConfig {
        applicationId configuration.package
        minSdkVersion configuration.minSdkVersion
        targetSdkVersion configuration.targetSdkVersion
        versionCode configuration.versionCode
        versionName configuration.versionName
        multiDexEnabled true
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        vectorDrawables.useSupportLibrary = true
        setProperty("archivesBaseName", "app")
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        disable 'InvalidPackage'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    def archiveBuildTypes = ["release", "debug"]
    def distFolder = "${System.properties['user.home']}\\Desktop\\MilkCollectionApp\\"
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (variant.buildType.name in archiveBuildTypes) {
                if (variant.versionName != null) {
                    String name = "${variant.getFlavorName()}_${variant.buildType.name}_v${variant.versionCode}.apk"
                    outputFileName = new File(name)
                }

                def taskSuffix = variant.name.capitalize()
                def assembleTaskName = "assemble${taskSuffix}"
                if (tasks.findByName(assembleTaskName)) {
                    def copyAPKFolderTask = tasks.create(name: "archive${taskSuffix}", type: Copy) {
                        description "Archive/copy APK folder to a shared folder."
                        def sourceFolder = "$buildDir/outputs/apk/${output.baseName.replace("-", "/")}"
                        def destinationFolder = "$distFolder${output.baseName.replace("-", "/")}"
                        print "Copying APK folder from: $sourceFolder into $destinationFolder\n"
                        from(sourceFolder)
                        into destinationFolder
                        eachFile { file ->
                            file.path = file.name
                        }
                        includeEmptyDirs = false
                    }
                    tasks[assembleTaskName].finalizedBy = [copyAPKFolderTask]
                }
            }
        }
    }
}

repositories {
    mavenCentral()
    maven {
        url 'https://oss.sonatype.org/content/repositories/ksoap2-android-releases/'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.google.android.gms:play-services-plus:17.0.0'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    testImplementation 'junit:junit:4.13.2'
    implementation files('libs/pdfa-7.1.3.jar')
    implementation files('libs/pdfa-7.1.3-javadoc.jar')
    implementation 'com.android.volley:volley:1.2.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'com.github.dantsu:escpos-thermalprinter-android:3.2.0'
    implementation 'com.github.GrenderG:Toasty:1.4.2'
    implementation 'cat.ereza:customactivityoncrash:2.4.0'
}
